lua << EOF
--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
--"                            vimrc / init.vim                            "
--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

--"""""""""""""""""
--"  Vim Plugins  "
--"""""""""""""""""
vim.opt.hidden = true


local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
{'nvim-neo-tree/neo-tree.nvim',
    dependencies = {
        'MunifTanjim/nui.nvim',
    }
},

'lewis6991/impatient.nvim',

'williamboman/nvim-lsp-installer',
'neovim/nvim-lspconfig',

'nvim-treesitter/nvim-treesitter',

'nvim-lua/lsp-status.nvim',

'nvim-telescope/telescope.nvim',
'nvim-lua/plenary.nvim',
'nvim-lua/popup.nvim',

'sheerun/vim-polyglot',

'tzachar/local-highlight.nvim',

'airblade/vim-gitgutter',

'scrooloose/nerdcommenter',

'dkarter/bullets.vim',
'lervag/wiki.vim',
'michal-h21/vim-zettel',

'samoshkin/vim-mergetool',

'rhysd/vim-clang-format',
'tpope/vim-fugitive',
'tpope/vim-unimpaired',
'tpope/vim-repeat',
'kana/vim-operator-user',

'christoomey/vim-tmux-navigator',
'edkolev/tmuxline.vim',
'tmux-plugins/vim-tmux',

'simeji/winresizer',

'psf/black',

'kyazdani42/nvim-web-devicons',

'nvim-neo-tree/neo-tree.nvim',

'kyazdani42/nvim-web-devicons',
'folke/trouble.nvim',

'folke/lsp-colors.nvim',

-- Git Blame auf steroiden
'rhysd/git-messenger.vim',


-- Lualine mit Nord Theme
'nvim-lualine/lualine.nvim',
'kyazdani42/nvim-web-devicons',

-- Another eye friendly colortheme
'sainnhe/everforest',
'rmehri01/onenord.nvim', 
'EdenEast/nightfox.nvim',
'arcticicestudio/nord-vim',
'rebelot/kanagawa.nvim',
'morhetz/gruvbox',

-- Highlight Colorcodes in theire color
'norcalli/nvim-colorizer.lua',

-- Highlight and search for TODO and other
'folke/todo-comments.nvim',

'lervag/vimtex',

-- Nvim-cmp
{'hrsh7th/nvim-cmp',
    dependencies = {
    'hrsh7th/cmp-buffer',
    'hrsh7th/cmp-path',
    'hrsh7th/cmp-cmdline',
    'hrsh7th/cmp-nvim-lsp',}
},

-- Vim Script
'ahmedkhalf/project.nvim',

'direnv/direnv.vim',

'nanozuki/tabby.nvim',

'folke/which-key.nvim',

'junegunn/vim-easy-align',

'danymat/neogen',

'phha/zenburn.nvim',

'simrat39/symbols-outline.nvim',

'nvim-treesitter/nvim-treesitter-context',

'wellle/targets.vim',

'tpope/vim-surround',

'szw/vim-maximizer',

'chaoren/vim-wordmotion',

})


vim.g.tex_flavor='xelatex'
vim.g.vimtex_view_method='zathura'
vim.g.vimtex_quickfix_mode=0
vim.g.tex_conceal='abdmg'
vim.opt.conceallevel=1
vim.api.nvim_create_autocmd({"BufEnter"}, {
    pattern = {"*.tex"},
    command = "nnoremap <leader>t <cmd>VimtexTocToggle<CR>",
    })

    

vim.opt.compatible = False
-- Use Vim settings, rather than Vi settings (much better!).
-- This must be first, because it changes other options as a side effect.

-- allow backspacing over everything in insert mode
vim.opt.backspace=indent,eol,start

vim.opt.backup = true -- keep a backup filel

vim.opt.ruler = true		-- show the cursor position all the time

vim.opt.showcmd = true		-- display incomplete commands

vim.opt.incsearch = true		-- do incremental searching

vim.opt.virtualedit=all     --virtualedit allows cursor movement on every position

vim.opt.wildmenu = true --Tab autovervollständigung"
vim.opt.wildmode = 'list:longest,full'

vim.opt.hlsearch = true

-- Enable file type detection.
-- Use the default filetype settings, so that mail gets 'tw' set to 72,
-- 'cindent' is on in C files, etc.
-- Also load indent files, to automatically do language-dependent indenting.
vim.api.nvim_command('filetype plugin indent on')

-- Put these in an autocmd group, so that we can delete them easily.
vim.api.nvim_command('au!')

-- When editing a file, always jump to the last known cursor position.
-- Don't do it when the position is invalid or when inside an event handler
-- (happens when dropping a file on gvim).
-- Also don't do it when the mark is in the first line, that is the default
-- position when opening a file.

vim.opt.autowrite = true
vim.opt.autowriteall = true

-- Some servers have issues with backup files, see #649
vim.opt.backupdir=vim.fn.expand("~/.vim/backupdir")
vim.opt.directory=vim.fn.expand("~/.vim/backupdir")

vim.opt.undodir=vim.fn.expand("~/.vim/undodir")
vim.opt.undofile = true

-- You will have bad experience for diagnostic messages when it's default 4000.
vim.opt.updatetime=100

-- always show signcolumns
vim.opt.signcolumn="auto"

-- History lenght. Maybe helpful for fzf history search
vim.opt.history=10000
 
-- Ask to save before buffer change"
vim.opt.confirm = true

-- dont use mouse
vim.opt.mouse=nv

-- Bei suche nicht auf groß- und kleinschreibung achten
vim.opt.ignorecase = true

vim.opt.tabstop=4
vim.opt.shiftwidth=4
vim.opt.expandtab = true
vim.opt.softtabstop=4
vim.opt.shiftround = true

vim.opt.number = true
vim.opt.cursorline = true
vim.wo.cursorline = true

-- Map Leader
vim.keymap.set("n", "<Space>", "<Nop>", { silent = true, remap = false })
vim.g.mapleader = " "



--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
--"                              Key mappings                              "
--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


--" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
--" so that you can undo CTRL-U after inserting a line break.
vim.keymap.set("i", "<C-U>", "<C-G>u<c-U>")

--" Tmux style window movement
vim.keymap.set("n", "<c-j>", "<c-w>j")
vim.keymap.set("n", "<c-k>", "<c-w>k")
vim.keymap.set("n", "<c-h>", "<c-w>h")
vim.keymap.set("n", "<c-l>", "<c-w>l")

vim.keymap.set("n", "H", ":tabnext<CR>")
vim.keymap.set("n", "L", ":tabprev<CR>")
vim.keymap.set("n", "<leader>tt", ":tabnew<CR>")
vim.keymap.set("n", "<leader>tn", ":tabnext<CR>")
vim.keymap.set("n", "<leader>tp", ":tabprevious<CR>")
vim.keymap.set("n", "<leader>tq", ":tabclose<CR>")

vim.keymap.set("n", "<leader>F", "<cmd>lua require('telescope.builtin').find_files()<CR>")
vim.keymap.set("n", "<leader>h", "<cmd>lua require('telescope.builtin').oldfiles()<CR>")


vim.keymap.set("n", "<leader>H", "<cmd>lua require('telescope.builtin').man_pages()<CR>")

vim.keymap.set("n", "<leader>dd", ":BufferClose<CR>")

--" Easy most-recent-buffer switching
--"nnoremap <Tab> :b#<CR>

vim.keymap.set("n", "<Space><space>", "<cmd>lua require('telescope.builtin').buffers()<CR>")


vim.keymap.set("n", "<Leader>r", "'")


vim.keymap.set("n", "<Leader>j", "<cmd>lua require('telescope.builtin').jumplist{}<CR>")

--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
--"                                Wiki                                    "
--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

--autocmd BufEnter *.md TSDisable highlight      
--
--let g:wiki_root = '~/vimwiki'
--let g:wiki_filetypes = ['md']
--let g:wiki_link_extension = '.md'
--let g:wiki_link_target_type = 'md'
--
--
--let wiki_1 = {}
--let wiki_1.path = '/home/stefan/vimwiki'
--let wiki_1.syntax = 'markdown'
--let wiki_1.ext = '.md'
--let wiki_1.auto_tags = 1
--let wiki_1.automatic_nested_syntaxes = 1
--" Refresh TOC if exists on save
--let wiki_1.auto_toc = 1
--" Highlight wiki links to non existing pages
--let wiki_1.maxhi = 1
--let wiki_1.auto_diary_index = 1
--
--let g:vimwiki_conceal_pre = 1
--
--let g:vimwiki_list = [wiki_1]
--let g:vimwiki_use_mouse = 0
--"let g:vimwiki_folding = 'expr'
--let g:vimwiki_auto_chdir = 1
--
--let g:zettel_format = "%Y-%m-%d_%H-%M_%A"
--
--let g:nv_search_paths = ['~stefan/vimwiki']
--
--nnoremap <leader>nn :NV!
--
--nnoremap <leader>zb :ZettelBackLinks<cr>
--nnoremap <leader>zz :ZettelNew<space>
--nnoremap <leader>zl :ZettelSearch<cr>
--
--"Mandatory for Ultisnips   
--let g:vimwiki_table_mappings = 0
--
--let g:vimwiki_hl_headers = 1
--
--" Set highliting of Headers in vimwiki more visible
--highlight! VimwikiHeaderChar cterm=bold ctermfg=0 ctermbg=6 gui=bold guifg=#5e81ac guibg=#2e3440
--highlight! link VimwikiLink SpellRare
--highlight! link VimwikiList markdownH1
--
--highlight! VimwikiHeader1 cterm=bold ctermfg=0 ctermbg=6 gui=bold guifg=#2e3440 guibg=#BF616A
--highlight! VimwikiHeader2 cterm=bold ctermfg=0 ctermbg=6 gui=bold guifg=#3B4252 guibg=#d08770
--highlight! VimwikiHeader4 cterm=bold ctermfg=0 ctermbg=6 gui=bold guifg=#2E3440 guibg=#A3BE8C
--highlight! VimwikiHeader3 cterm=bold ctermfg=0 ctermbg=6 gui=bold guifg=#2E3440 guibg=#EBCB8B


--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
--"                           Ultisnips settings                           "
--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
--
--" better key bindings for UltiSnipsExpandTrigger
--let g:UltiSnipsExpandTrigger = "<c-s>"
--let g:UltiSnipsJumpForwardTrigger = "<tab>"
--let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
--" 
--let g:UltiSnipsSnippetsDir = $HOME."/.vim/privat_snippets"
--let g:UltiSnipsSnippetDirectories = [$HOME."/.vim/plugged/vim-snippets/UltiSnips/", $HOME."/.vim/privat_snippets", $HOME."/.vim/privat_snippets_tmp",]
--
--let g:snips_author = "Stefan Geyer"

--"""""""""""""""
--"  Telescope  "
--"""""""""""""""

require('telescope').setup({
  defaults = {
    layout_config = {
      vertical = { width = 0.95 }
      -- other layout configuration here
    },
    layout_strategy = "vertical",
    -- sorting_strategy= "ascending",
    sorting_strategy= "descending",
    -- other defaults configuration here
  },
  -- other configuration values here
})


--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
--"                                  fzf                                   "
--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

vim.opt.rtp:append("~/.fzf")

--" Customize fzf colors to match your color scheme
vim.g.fzf_colors =
\ "{ 'fg':      ['fg', 'Normal'],
\ 'bg':      ['bg', 'Normal'],
\ 'hl':      ['fg', 'Comment'],
\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
\ 'hl+':     ['fg', 'Statement'],
\ 'info':    ['fg', 'PreProc'],
\ 'border':  ['fg', 'Ignore'],
\ 'prompt':  ['fg', 'Conditional'],
\ 'pointer': ['fg', 'Exception'],
\ 'marker':  ['fg', 'Keyword'],
\ 'spinner': ['fg', 'Label'],
\ 'header':  ['fg', 'Comment'] }"


--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
--"                         vim fugitive settings                          "
--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

--"delte hidden fugitive buffer. Reduces cluttering of past opend git objects
--autocmd BufReadPost fugitive://* set bufhidden=delete
vim.api.nvim_create_autocmd({"BufReadPost"}, {
    pattern = {"fugitive://*"},
    command = "set bufhidden=delete",
    })

--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
--"                          Clipboard management                          "
--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

--" Copy to clipboard
vim.keymap.set("v", '<leader>y', '"+y')
vim.keymap.set("n", '<leader>Y', '"+yg_')
vim.keymap.set("n", '<leader>y', '"+y')
vim.keymap.set("n", '<leader>yy', '"+yy')

--" Paste from clipboard
vim.keymap.set("n", '<leader>p', '"+p')
vim.keymap.set("n", '<leader>P', '"+P')
vim.keymap.set("v", '<leader>p', '"+p')
vim.keymap.set("v", '<leader>P', '"+P')


--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
--"                               lsp Stuff                                "
--""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

vim.api.nvim_create_user_command( 'Declaration', ":lua vim.lsp.buf.declaration()", {})
vim.api.nvim_create_user_command( 'Definition', ":lua vim.lsp.buf.definition()", {})
vim.api.nvim_create_user_command( 'Hover', ":lua vim.lsp.buf.hover()", {})
vim.api.nvim_create_user_command( 'Implementation', ":lua vim.lsp.buf.implementation()", {})
vim.api.nvim_create_user_command( 'SignatureHelp', ":lua vim.lsp.buf.signature_help()", {})
vim.api.nvim_create_user_command( 'TypeDefinition', ":lua vim.lsp.buf.type_definition()", {})
vim.api.nvim_create_user_command( 'References', ":lua require'telescope.builtin'.lsp_references{}", {})
vim.api.nvim_create_user_command( 'DocumentSymbol', ":lua vim.lsp.buf.document_symbol()", {})
vim.api.nvim_create_user_command( 'WorkspaceSymbol', ":lua vim.lsp.buf.workspace_symbol()", {})
vim.api.nvim_create_user_command( 'Format', ":lua vim.lsp.buf.formatting_sync(nil, 1000)", {})
vim.api.nvim_create_user_command( 'Rename', ":lua vim.lsp.buf.rename()", {})

vim.keymap.set("n", '<silent>K',  '<cmd>Hover<CR>', {})
vim.keymap.set("n", '<silent>gd', '<cmd>Definition<CR>', {})
vim.keymap.set("n", '<silent>gy', '<cmd>TypeDefinition<CR>', {})
vim.keymap.set("n", '<silent>gi', '<cmd>Implementation<CR>', {})
vim.keymap.set("n", '<silent>gr', '<cmd>References<CR>', {})
vim.keymap.set("n", '<silent>]d', ':lua vim.lsp.diagnostic.goto_next()<CR>', {})
vim.keymap.set("n", '<silent>[d', ':lua vim.lsp.diagnostic.goto_prev()<CR>', {})

vim.keymap.set("n", '<leader>f',  '<cmd>Format<CR>', {})
vim.keymap.set("n", '<leader>r',  '<cmd>Rename<CR>', {})
vim.keymap.set("n", '<leader>p',  "<cmd>lua require'telescope.builtin'.git_files{}<CR>", {})
vim.keymap.set("n", '<leader>ws', "<cmd>lua require'telescope.builtin'.lsp_workspace_symbols{}<CR>", {})
vim.keymap.set("n", '<leader>ds', "<cmd>lua require'telescope.builtin'.lsp_document_symbols{}<CR>", {})
vim.keymap.set("n", '<leader>w',  '<cmd>update<CR>', {})
vim.keymap.set("n", '<leader>q',  '<cmd>quit<CR>', {})

EOF

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Other                                  "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" VIm Autoscroll. 
set scrolloff=4


lua << EOF

-- Do default action for previous item.
-- vim.keymap.set("n", '<silent> <space>=  :set ea noea<CR>


    require("nvim-lsp-installer").setup({
    automatic_installation = true, -- automatically detect which servers to install (based on which servers are set up via lspconfig)
    ui = {
        icons = {
            server_installed = "✓",
            server_pending = "➜",
            server_uninstalled = "✗"
        }
    }
})


EOF

lua << EOF

lsp_status = require('lsp-status')
lsp_status.register_progress()
lsp_status.config({
    status_symbol = "",
})

EOF


set completeopt=menu,menuone,noselect


lua << EOF

require'nvim-treesitter.configs'.setup {
  ensure_installed = "all",
  highlight = {
    enable = true,
  },
  indent = {
    enable = true
  },

    -- List of parsers to ignore installing
  ignore_install = { "norg" }
}


--""""""""""""
--" nvim-cmp "
--""""""""""""

-- Setup nvim-cmp.
local cmp = require'cmp'

cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
      ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
      ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
      ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
      --['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      -- { name = 'cmp_tabnine' },
      -- { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline('/', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Setup lspconfig.
  local capabilities = require('cmp_nvim_lsp').default_capabilities(vim.lsp.protocol.make_client_capabilities())
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  --require('lspconfig')['<YOUR_LSP_SERVER>'].setup {
  --  capabilities = capabilities
  -- }
  local lspconfig = require'lspconfig'
  
  lspconfig.clangd.setup{
      cmd = { "clangd-10", "--background-index" , "--cross-file-rename", "--all-scopes-completion", "--completion-style=detailed", "-j=10"},
      capabilities = capabilities
      }
  
  lspconfig.cmake.setup{
      capabilities = capabilities
  }
  
  
  --Enable (broadcasting) snippet capability for completion
  -- local capabilities = vim.lsp.protocol.make_client_capabilities()
  -- capabilities.textDocument.completion.completionItem.snippetSupport = true
  
  
  lspconfig.html.setup {
      capabilities = capabilities,
      }



  lspconfig.pyright.setup{
   capabilities = capabilities,
   settings = {
       pyright = {
           useLibraryCodeForTypes = true,
           reportMissingImports = true,
           diagnosticMode = "openFilesOnly",
           autoSearchPaths = true,
           }
       }
  }
  
  -- require'lspconfig'.jedi_language_server.setup{
  --   capabilities = capabilities,
  -- }
  
  
  require'lspconfig'.texlab.setup{
    capabilities = capabilities,
  }

  require'lspconfig'.marksman.setup{
      capabilities = capabilities
      }



vim.keymap.set("n", '<leader>a', ':ClangdSwitchSourceHeader<CR>', {})


--""""""""""""""""
-- Trouble.nvim  "
--""""""""""""""""
vim.keymap.set("n", '<F2>', '<cmd>TroubleToggle<cr>', {})

  --- more config can be found here: 
  --- https://github.com/folke/trouble.nvim
  require("trouble").setup { }


-- zwei mal den befehl ausfuehren bewegt den crsor in das gitmessenger feld
-- Mit o und O kann durch die history gewechselt werden
-- d und D zeigen verschiedene dif versionen 
-- ? zeigt die hilfeseite


--"""""""""""
-- Lualine  "
--"""""""""""

require('lualine').setup {
    --- options = {theme = "nord"}
    --- options = {theme = "everforest"}
    --- options = {theme = "onenord"},
    --- options = {theme = "gruvbox_dark"},
}

--""""""""""""""
-- everforest  "
--""""""""""""""

 
vim.cmd("set termguicolors")


vim.cmd("colorscheme gruvbox")

--"""""""""""""""
--"  colorizer  "
--"""""""""""""""

require("colorizer").setup()

--""""""""""""""""""""""""
--"  todo-comments.nvim  "
--""""""""""""""""""""""""

require("todo-comments").setup {
        signs = true, -- show icons in the signs column
  sign_priority = 8, -- sign priority
  -- keywords recognized as todo comments
  keywords = {
    FIX = {
      icon = " ", -- icon used for the sign, and in search results
      color = "error", -- can be a hex color, or a named color (see below)
      alt = { "FIXME", "BUG", "FIXIT", "ISSUE" }, -- a set of other keywords that all map to this FIX keywords
      -- signs = false, -- configure signs for some keywords individually
    },
    TODO = { icon = " ", color = "warning" },
    HACK = { icon = " ", color = "warning" },
    WARN = { icon = " ", color = "warning", alt = { "WARNING", "XXX" } },
    PERF = { icon = " ", color = "info", alt = { "OPTIM", "PERFORMANCE", "OPTIMIZE" } },
    NOTE = { icon = " ", color = "hint", alt = { "INFO" } },
    QUESTION = { icon = "?", color = Orange },
  },
  merge_keywords = true, -- when true, custom keywords will be merged with the defaults
  -- highlighting of the line containing the todo comment
  -- * before: highlights before the keyword (typically comment characters)
  -- * keyword: highlights of the keyword
  -- * after: highlights after the keyword (todo text)
  highlight = {
    before = "", -- "fg" or "bg" or empty
    keyword = "wide", -- "fg", "bg", "wide" or empty. (wide is the same as bg, but will also highlight surrounding characters)
    after = "fg", -- "fg" or "bg" or empty
    pattern = [[.*<(KEYWORDS)\s*:]], -- pattern used for highlightng (vim regex)
    comments_only = true, -- uses treesitter to match keywords in comments only
    max_line_len = 400, -- ignore lines longer than this
    exclude = {}, -- list of file types to exclude highlighting
  },
  -- list of named colors where we try to extract the guifg from the
  -- list of hilight groups or use the hex color if hl not found as a fallback
  colors = {
    error = { "LspDiagnosticsDefaultError", "ErrorMsg", "#DC2626" },
    warning = { "LspDiagnosticsDefaultWarning", "WarningMsg", "#FBBF24" },
    info = { "LspDiagnosticsDefaultInformation", "#2563EB" },
    hint = { "LspDiagnosticsDefaultHint", "#10B981" },
    default = { "Identifier", "#7C3AED" },
      },
  search = {
    command = "rg",
    args = {
      "--color=never",
      "--no-heading",
      "--with-filename",
      "--line-number",
      "--column",
    },
    -- regex that will be used to match keywords.
    -- don't replace the (KEYWORDS) placeholder
    pattern = [[\b(KEYWORDS):]], -- ripgrep regex
    -- pattern = [[\b(KEYWORDS)\b]], -- match without the extra colon. You'll likely get false positives
  },
  }
EOF

""""""""""""""""""""""
"  Markdown-preview  "
""""""""""""""""""""""

" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0

" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" default: 0
let g:mkdp_open_to_the_world = 0

" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_ip = ''

" specify browser to open preview page
" default: ''
let g:mkdp_browser = ''

" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 1

" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
" content_editable: if enable content editable for preview page, default: v:false
" disable_filename: if disable filename header for preview page, default: 0
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 0
    \ }

" use a custom markdown style must be absolute path
" like '/Users/username/markdown.css' or expand('~/markdown.css')
let g:mkdp_markdown_css = ''

" use a custom highlight style must absolute path
" like '/Users/username/highlight.css' or expand('~/highlight.css')
let g:mkdp_highlight_css = ''

" use a custom port to start server or random for empty
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '「${name}」'

" recognized filetypes
" these filetypes will have MarkdownPreview... commands
let g:mkdp_filetypes = ['markdown']


""""""""""""""""""
"  Project nvim  "
""""""""""""""""""

lua << EOF
  require("project_nvim").setup {}
  require('telescope').load_extension('projects')
EOF



" Don't lose selection when shifting sidewards
xnoremap <  <gv
xnoremap >  >gv


"""""""""""
"  tabby  "
"""""""""""

lua << EOF
    require("tabby").setup{}
EOF

"""""""""""""""
"  which key  "


lua << EOF
  require("which-key").setup {
    -- your configuration comes here
    -- or leave it empty to use the default settings
    -- refer to the configuration section below
  }
EOF

""""""""""""""""""""
"  Easy Paragraph  "
""""""""""""""""""""

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

""""""""""""
"  Neogen  "
""""""""""""

lua << EOF

    require('neogen').setup{}

EOF


"""""""""""""""""""""
"  symbols outline  "
"""""""""""""""""""""

lua << EOF
    require("symbols-outline").setup()
EOF


let g:vim_markdown_folding_disabled = 1

noremap gf :e <cfile><cr>


lua << EOF
require('local-highlight').setup({
    file_types = {'python', 'cpp'},
    hlgroup = 'Search',
    cw_hlgroup = nil,
})
EOF

set updatetime=100
